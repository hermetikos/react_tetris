{"ast":null,"code":"import _slicedToArray from\"/home/stan/react-tetris/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';// components\nimport{createStage,checkCollision}from'../gameHelpers';import Stage from'./Stage';import Display from'./Display';import StartButton from\"./StartButton\";// styling\nimport{StyledTetris,StyledTetrisWrapper}from\"./styles/StyledTetris\";// custom hooks\nimport{usePlayer}from\"../hooks/usePlayer\";import{useStage}from\"../hooks/useStage\";import{useInterval}from\"../hooks/useInterval\";import{useGameStatus}from\"../hooks/useGameStatus\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Tetris=function Tetris(_ref){var type=_ref.type;// a hook used to alter speed the tetromino drops at\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),dropTime=_useState2[0],setDropTime=_useState2[1];// a hook to get/set the gameover state\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),gameOver=_useState4[0],setGameOver=_useState4[1];// get the getters/setters from our custom hooks\nvar _usePlayer=usePlayer(),_usePlayer2=_slicedToArray(_usePlayer,4),player=_usePlayer2[0],updatePlayerPos=_usePlayer2[1],resetPlayer=_usePlayer2[2],playerRotate=_usePlayer2[3];var _useStage=useStage(player,resetPlayer),_useStage2=_slicedToArray(_useStage,3),stage=_useStage2[0],setStage=_useStage2[1],rowsCleared=_useStage2[2];var _useGameStatus=useGameStatus(rowsCleared),_useGameStatus2=_slicedToArray(_useGameStatus,6),score=_useGameStatus2[0],setScore=_useGameStatus2[1],rows=_useGameStatus2[2],setRows=_useGameStatus2[3],level=_useGameStatus2[4],setLevel=_useGameStatus2[5];console.log('re-rendered game');// a callback that manages user keypresses\nvar move=function move(_ref2){var keyCode=_ref2.keyCode;// these controls hold during gameplay,\n// so check if we're in game over\nif(!gameOver){// left arrow\nif(keyCode===37){// move left\nmovePlayer(-1);}// right arrow\nelse if(keyCode===39){// move right\nmovePlayer(1);}// down key\nelse if(keyCode===40){// drop the piece\ndropPlayer();}// up key\nelse if(keyCode===38){playerRotate(stage,1);}}};// update the position of the falling teromino\nvar movePlayer=function movePlayer(dir){// only move if we aren't colliding with anything\nif(!checkCollision(player,stage,{x:dir,y:0})){updatePlayerPos({x:dir,y:0});}};var startGame=function startGame(){// reset everything\n// clear the stage\nsetStage(createStage());setDropTime(1000);// bring a new piece to the top of the stage\nresetPlayer();// set game over to false\nsetGameOver(false);// reset score\nsetScore(0);setRows(0);setLevel(0);};// attempt to drop the tetromino down one level\nvar drop=function drop(){// increase level when player has cleared 10 rows\nif(rows>(level+1)*10){setLevel(function(prev){return prev+1;});setDropTime(1000/(level+1)+200);}// if the space below is free...\nif(!checkCollision(player,stage,{x:0,y:1})){// move the piece down\nupdatePlayerPos({x:0,y:1,collided:false});// otherwise...\n}else{// if we have stacked pieces up to the top\n// (that is, position 0 in the stage grid)...\nif(player.pos.y<1){// we are in the game over state\nconsole.log(\"Game Over\");setGameOver(true);// we should also clear the drop time\nsetDropTime(null);}// if nothing else holds, that means this piece has\n// been obstructed and should stop moving\nupdatePlayerPos({x:0,y:0,collided:true});}};// this resets the drop speed if we release the down key\nvar keyUp=function keyUp(_ref3){var keyCode=_ref3.keyCode;if(!gameOver){if(keyCode===40){console.log(\"Interval On\");setDropTime(1000/(level+1)+200);}}};var dropPlayer=function dropPlayer(){// while we manually drop pieces, we want to stop the timed drop\nconsole.log(\"Interval Off\");setDropTime(null);drop();};// \nuseInterval(function(){drop();},dropTime);return/*#__PURE__*/_jsx(StyledTetrisWrapper,{role:\"button\",tabIndex:\"0\",onKeyDown:function onKeyDown(e){return move(e);},onKeyUp:keyUp,children:/*#__PURE__*/_jsxs(StyledTetris,{children:[/*#__PURE__*/_jsx(Stage,{stage:stage}),/*#__PURE__*/_jsxs(\"aside\",{children:[gameOver?/*#__PURE__*/_jsx(Display,{gameOver:gameOver,text:\"Game Over\"}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Display,{text:\"score: \".concat(score)}),/*#__PURE__*/_jsx(Display,{text:\"rows: \".concat(rows)}),/*#__PURE__*/_jsx(Display,{text:\"level: \".concat(level)})]}),/*#__PURE__*/_jsx(StartButton,{callback:startGame})]})]})});};export default Tetris;","map":{"version":3,"sources":["/home/stan/react-tetris/app/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","Stage","Display","StartButton","StyledTetris","StyledTetrisWrapper","usePlayer","useStage","useInterval","useGameStatus","Tetris","type","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","console","log","move","keyCode","movePlayer","dropPlayer","dir","x","y","startGame","drop","prev","collided","pos","keyUp","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n// components\nimport { createStage, checkCollision } from '../gameHelpers';\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from \"./StartButton\";\n// styling\nimport { StyledTetris, StyledTetrisWrapper } from \"./styles/StyledTetris\";\n\n// custom hooks\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { useInterval } from \"../hooks/useInterval\";\nimport { useGameStatus } from \"../hooks/useGameStatus\";\n\nconst Tetris = ({ type }) => {\n    // a hook used to alter speed the tetromino drops at\n    const [dropTime, setDropTime] = useState(null);\n    // a hook to get/set the gameover state\n    const [gameOver, setGameOver] = useState(false);\n\n    // get the getters/setters from our custom hooks\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n        rowsCleared\n    );\n\n    console.log('re-rendered game');\n\n    // a callback that manages user keypresses\n    const move = ({ keyCode }) => {\n        // these controls hold during gameplay,\n        // so check if we're in game over\n        if(!gameOver) {\n            // left arrow\n            if (keyCode === 37) {\n                // move left\n                movePlayer(-1);\n            }\n            // right arrow\n            else if (keyCode === 39) {\n                // move right\n                movePlayer(1);\n            }\n            // down key\n            else if (keyCode === 40) {\n                // drop the piece\n                dropPlayer();\n            }\n            // up key\n            else if (keyCode === 38) {\n                playerRotate(stage, 1);\n            }\n        }\n    }\n\n    // update the position of the falling teromino\n    const movePlayer = dir => {\n        // only move if we aren't colliding with anything\n        if (!checkCollision(player, stage, {x: dir, y: 0})) {\n            updatePlayerPos({ x: dir, y: 0 });\n        }\n    }\n\n    const startGame = () => {\n        // reset everything\n\n        // clear the stage\n        setStage(createStage());\n        setDropTime(1000);\n        // bring a new piece to the top of the stage\n        resetPlayer();\n        // set game over to false\n        setGameOver(false);\n        // reset score\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n    }\n\n    // attempt to drop the tetromino down one level\n    const drop = () => {\n        // increase level when player has cleared 10 rows\n        if (rows > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            setDropTime(1000 / (level + 1) + 200);\n        }\n\n        // if the space below is free...\n        if(!checkCollision(player, stage, { x: 0, y: 1})) {\n            // move the piece down\n            updatePlayerPos({\n            x: 0, y: 1,\n            collided: false\n            });\n        // otherwise...\n        } else {\n            // if we have stacked pieces up to the top\n            // (that is, position 0 in the stage grid)...\n            if (player.pos.y < 1) {\n                // we are in the game over state\n                console.log(\"Game Over\");\n                setGameOver(true);\n                // we should also clear the drop time\n                setDropTime(null);\n            }\n\n            // if nothing else holds, that means this piece has\n            // been obstructed and should stop moving\n            updatePlayerPos({ x: 0, y: 0, collided: true});\n        }\n    }\n\n    // this resets the drop speed if we release the down key\n    const keyUp = ({keyCode}) => {\n        if(!gameOver) {\n            if (keyCode === 40) {\n                console.log(\"Interval On\");\n                setDropTime(1000 / (level + 1) + 200);\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n        // while we manually drop pieces, we want to stop the timed drop\n        console.log(\"Interval Off\");\n        setDropTime(null);\n        drop();\n    }\n\n    // \n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    return (\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\"\n            onKeyDown={e => move(e)}\n            onKeyUp={keyUp}\n            >\n            {/*\n                role=\"button\" is used to identify the purpose of the element\n                notably accessibility software\n                tabIndex=\"0\"\n                tab index sets the order which tabbing accesses elements\n                -1 means inaccessible through tab\n                0 is the first tabable element\n                and then any positive int is visited in order\n                (so tab item 3 comes after 0 but before 5)\n\n                Note we use the wrapper because since it is the top element,\n                it allows us to click anywhere in the screen to capture input\n                rather than a specific element\n            */}\n            <StyledTetris>\n                <Stage stage={stage}/>\n                <aside>\n                    {gameOver ? (\n                        <Display gameOver={gameOver} text=\"Game Over\" />\n                    ) : (\n                        <div>\n                            <Display text={`score: ${score}`}/>\n                            <Display text={`rows: ${rows}`} />\n                            <Display text={`level: ${level}`} />\n                        </div>\n                    )}\n                    \n                    <StartButton callback={startGame}/>\n                </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    )\n}\n\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}