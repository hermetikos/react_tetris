{"ast":null,"code":"import _slicedToArray from\"/home/stan/react-tetris/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect,useCallback}from'react';export var useGameStatus=function useGameStatus(rowsCleared){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),score=_useState2[0],setScore=_useState2[1];// this is used to track how many TOTAL rows the player has cleared\nvar _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),rows=_useState4[0],setRows=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),level=_useState6[0],setLevel=_useState6[1];// the number of points you get for clearing lines\n// the more lines you clear at once, the larger the reward\n// these are the values used in the OG tetris game\nvar linePoints=[40,100,300,1200];// this will recalculate the score\n// this function is fired whenever the level,\n// the line points, or the number of cleared rows changes\n// so it won't fire on every render, which is good for efficiency\nvar calcScore=useCallback(function(){// check if we've actually cleared any rows\nif(rowsCleared>0){// we use both the rows cleared and the current level to calculate \n// this is the formula used in OG tetris\nsetScore(function(prev){return prev+linePoints[rowsCleared-1]*(level+1);});setRows(function(prev){return prev+rowsCleared;});}},[level,linePoints,rowsCleared]);// an effect that should run whenever the score changes\nuseEffect(function(){calcScore();},[calcScore,rowsCleared,score]);return[score,setScore,rows,setRows,level,setLevel];};","map":{"version":3,"sources":["/home/stan/react-tetris/app/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":"kJAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,WAA9B,KAAiD,OAAjD,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,WAAW,CAAI,eACdJ,QAAQ,CAAC,CAAD,CADM,wCACjCK,KADiC,eAC1BC,QAD0B,eAExC;AAFwC,eAGhBN,QAAQ,CAAC,CAAD,CAHQ,yCAGjCO,IAHiC,eAG3BC,OAH2B,8BAIdR,QAAQ,CAAC,CAAD,CAJM,yCAIjCS,KAJiC,eAI1BC,QAJ0B,eAMxC;AACA;AACA;AACA,GAAMC,CAAAA,UAAU,CAAG,CAAC,EAAD,CAAK,GAAL,CAAU,GAAV,CAAe,IAAf,CAAnB,CAEA;AACA;AACA;AACA;AACA,GAAMC,CAAAA,SAAS,CAAGV,WAAW,CAAC,UAAM,CAChC;AACA,GAAIE,WAAW,CAAG,CAAlB,CAAqB,CACjB;AACA;AACAE,QAAQ,CAAC,SAAAO,IAAI,QAAIA,CAAAA,IAAI,CAAGF,UAAU,CAACP,WAAW,CAAC,CAAb,CAAV,EAA6BK,KAAK,CAAG,CAArC,CAAX,EAAL,CAAR,CACAD,OAAO,CAAC,SAAAK,IAAI,QAAIA,CAAAA,IAAI,CAAGT,WAAX,EAAL,CAAP,CACH,CACJ,CAR4B,CAQ1B,CAACK,KAAD,CAAQE,UAAR,CAAoBP,WAApB,CAR0B,CAA7B,CAUA;AACAH,SAAS,CAAC,UAAM,CACZW,SAAS,GACZ,CAFQ,CAEN,CAACA,SAAD,CAAYR,WAAZ,CAAyBC,KAAzB,CAFM,CAAT,CAIA,MAAO,CAACA,KAAD,CAAQC,QAAR,CAAkBC,IAAlB,CAAwBC,OAAxB,CAAiCC,KAAjC,CAAwCC,QAAxC,CAAP,CACH,CA/BM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    // this is used to track how many TOTAL rows the player has cleared\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    // the number of points you get for clearing lines\n    // the more lines you clear at once, the larger the reward\n    // these are the values used in the OG tetris game\n    const linePoints = [40, 100, 300, 1200];\n\n    // this will recalculate the score\n    // this function is fired whenever the level,\n    // the line points, or the number of cleared rows changes\n    // so it won't fire on every render, which is good for efficiency\n    const calcScore = useCallback(() => {\n        // check if we've actually cleared any rows\n        if (rowsCleared > 0) {\n            // we use both the rows cleared and the current level to calculate \n            // this is the formula used in OG tetris\n            setScore(prev => prev + linePoints[rowsCleared-1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared])\n\n    // an effect that should run whenever the score changes\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel];\n}"]},"metadata":{},"sourceType":"module"}